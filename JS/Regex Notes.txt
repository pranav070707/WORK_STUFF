Regex:
flags:

i: removes case difference
g: allows repeat


Search options:

. : if you wanted to match "hug", "huh", "hut", and "hum", you can use the regex /hu./ to match all four words.
[ ] : you want to match "bag", "big", and "bug" but not "bog". You can create the regex /b[aiu]g/ to do this. The [aiu] is the character class that will only match the characters "a", "i", or "u".
- :  to match lowercase letters a through e you would use [a-e].
^ : /[^aeiou]/gi matches all characters that are not a vowel. Note that characters like ., !, [, @, / and white space are matched - the negated vowel character set only excludes the vowel characters.
+ : look for characters that occur one or more times.
* : this option that matches characters that occur zero or more times.


Start/end search:

^(outside) : Outside of a character set, the caret is used to search for patterns at the beginning of strings.
$ : You can search the end of strings using the dollar sign character $ at the end of the regex.


Shortcut hands:

\w : This shortcut is equal to [A-Za-z0-9_]
\W : You can search for the opposite of the \w with \W. 
\d : This is equal to the character class [0-9], which looks for a single character of any number between zero and nine.
\D : This is equal to the character class [^0-9], which looks for a single character that is not a number between zero and nine.
\s : You can search for whitespace using \s, which is a lowercase s. This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. You can think of it as similar to the character class [ \r\t\f\n\v].
\S :  You can also search for everything except whitespace.


{ } : You can specify the lower and upper number of patterns with quantity specifiers. Quantity specifiers are used with curly brackets ({ and }).

